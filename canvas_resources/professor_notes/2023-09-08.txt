CS 214 / 2023-09-08
===================

Have you logged into an iLab machine yet?
Have you compiled and executed a simple program yet?

Basic C types (numbers)
-----------------------

integers
    eight flavors of integer
        (un)signed char
        (un)signed (short/long) int
    enumerated types ("fancy integers")
floating-point
    float, double

125  - signed integer literal
125U - unsigned integer literal

    unsigned int n = 125;
    unsigned int n = -1;   // automatically cast to unsigned
                    // negative signed ints become large unsigned ints
10000000000  --> too big to be a regular int (on our hardware)
10000000000L  --> long integer literal


            1 << 40
            
        long n = 1L << 40;
        
                using 1L forces the compiler to use long int
                
            1UL  - unsigned long int

        int n = ...;
        long m = ...;
        
        n + m     -- automatically casts (the value of) n to long int

        int n = -1;
        unsigned int m = 1;
        
         n < m
                    -- are we using signed or unsigned comparison here?
                    -- don't rely on it "just working"; be explicit!
                    
        to force signed comparison
            n < (int) m
    
        to force unsigned comparison
            ((unsigned int) n) < m

    character literals are also integers!
            'A' is an integer; you can do integer things with it
            
            'A' < 'B'
            
        char n = ....;
        
        if ('A' <= n && n <= 'Z') { .... }
        

enumerated types

enum cardinal { north, east, south, west };

    enum cardinal orientation = north;


    switch (get_next_direction()) {
    
        case north:
            ...
            
        case south:
            ...
            
        default:
            ...
    }

enumerated types are treated as integers and automatically cast

    enum cardinal wrong_direction = 5;


enum color = { red, green, blue:5 };

    enum cardinal oh_no = red;

    
summary:
    many integer types of different sizes/ranges
    mixing these will automatically cast
        in aritmetic, we cast to the "larger" type
    use explicit casts for clarity!

for floating point:
    pretty much always use double
    or maybe rethink what you're doing?

Aggregate types
---------------

arrays in C
    very simple memory representation:
        just the array elements contiguously in memory
    no type information/bounds kept at runtime
        the compiler literally cannot detect out-of-bounds accesses
        
    int my_array[5];
            declares an array variable with 5 integers
            array indexing always starts at 0
            
    long int my_big_array[20];
    
    array sizes should be constants (constant expressions)
    
    #define MAX_LENGTH 20
        
    int my_extra_long_array[MAX_LENGTH+1];
    
    note: "variable-length" arrays are not recommended!
        can cause security problems
        can be tricky
        not supported by all compilers
        
    
    multi-dimensional arrays
    
    double matrix[100][100];
        matrix[1][1] = 2;
        
    initializing array variables
    
    int my_array[5] = {1, 2, 4, 8, 16};
    
    int my_array[] = {1, 2, 4, 8, 16};
        // automatically sizes array based on initializer
        
    int my_array[10] = {1, 2, 3, 6, 7};
        // initializes first 5 elements, leaves rest uninitialized

    int small_matrix[3][] = { { 1, 2, 3}, {4, 5, 6}, {7, 8, 9} };
        
    curly braces only work for variable declaration & initialization
    my_array = {1, 2, 3, 4, 5};   // not valid syntax
        

    char foo[10];
    
    char bar[] = {'h', 'e', 'l', 'l', 'o'};
    
    char baz[] = {'h', 'e', 'l', 'l', 'o', '\0'};
        strings must end with a terminator character
        baz the variable is 6 bytes long
        it contains a 5-character string
        
    
    char string_var[128] = "default";
    char baz[] = "hello";
    
        string literals always include the terminator char
        
        
        strcat(string_var, baz);
    
    char names[][64] = { "joe", "bob", "jim" };
        creates an array of 3 char arrays and (partially) initializes them
    
    
int my_array[3][3] = { 
    {1, 2, 3}, 
    {4, 5, 6}, 
    {7, 8, 9} };

    my_array[1][1] == 5
    my_array[0][2] == 3
    
    my_array[0][3] == 4
    my_array[1][-1] == 3   -- this is technically ok! (but why would you do this?)
