 --Belongs in coalesce()
 
 /*
    int *ptr = malloc(10);
    double *ptr2 = malloc(20);
    int *ptr3 = malloc(4024);
    free(ptr);
    free(ptr3);
    free(ptr2);

    */

    // + HEADER_SIZE + current->size


--Belongs in my_malloc()

        HEADER *head = (HEADER *)memory;
        HEADER *next = (char *)head + HEADER_SIZE + head->size;
        int n_byte = HEADER_SIZE + head->size;

        while (next->is_occupied == 1 || next->size < size)
        {

            n_byte += HEADER_SIZE + next->size;

            if (n_byte >= MEMLENGTH_BYTES)
            {

                // TODO: Print error message regarding not having enough space.
                // WIP: Only tested on when first header occupies ENTIRE ARRAY.
                printf("ERROR: Not having enough space \n ORIGIN: at line %d in file %s", __LINE__, __FILE__);
                return NULL;
            }

            next = (char *)next + HEADER_SIZE + next->size;
        }

        // If we find a header that is free and has
        // enough empty space. We then check if it
        // could have enough additional space to create
        // a meaningful free chunk after our alloted data.

        int old_size = next->size;
        next->size = size;

        if (old_size - (HEADER_SIZE + size) >= HEADER_SIZE)
        {
            ((HEADER *)((char *)(next + 1) + size))->size = old_size - (HEADER_SIZE + size);
            ((HEADER *)((char *)(next + 1) + size))->is_occupied = 0;
        }

        next->is_occupied = 1;

        printf("success \n");
        return next + 1;






--Belongs in my_free()

        // Adjusting ptr to point to its header
        HEADER *ptr_header = (HEADER *)((char *)ptr - HEADER_SIZE);

        // Now we go through the array looking for the chunk that the pointer points to.
        HEADER *current = (HEADER *)memory;
        void *data_ptr;  // pointer to the current data segment

        // We traverse the array header by header.
        while ((void *)current < (void *)memory + MEMLENGTH_BYTES)
        {
            data_ptr = (void *)((char *)current + HEADER_SIZE);  // data segment starts after the header

            // Check if we've found the correct memory block.
            if (data_ptr == ptr)
            {
                if (current->is_occupied == 0)
                {
                    printf("ERROR: Pointer was already freed \n ORIGIN: at line %d in file %s", line, file);
                    coalesce();
                    return;
                }

                // Valid pointer found, free the memory block
                current->is_occupied = 0;
                coalesce();
                printf("success");
                return;
            }

            // Moving to the next block in the memory array
            current = (HEADER *)((char *)current + HEADER_SIZE + current->size);
        }
